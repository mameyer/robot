#!/usr/bin/env python

import rospy
import random
import math
from axis.msg import StepperCommand

class MotionCommandGenerator(object):

    def __init__(self):
        self.pub = rospy.Publisher('stepper_commands', StepperCommand, queue_size=1)
        self.rate_hz = 1/2.0
        self.rate = rospy.Rate(self.rate_hz)

    def sendStepperCommands(self):
        stepperCommand = StepperCommand()
        stepperCommand.delay = 0.025
        
        while not rospy.is_shutdown():    
            stepperCommand.steps = 7
            self.sendStepperCommand(stepperCommand, "stepper_0")
            stepperCommand.steps = -7
            self.sendStepperCommand(stepperCommand, "stepper_0")
            
            stepperCommand.steps = 7
            self.sendStepperCommand(stepperCommand, "stepper_1")
            stepperCommand.steps = -7
            self.sendStepperCommand(stepperCommand, "stepper_1")
            
            stepperCommand.steps = 7
            self.sendStepperCommand(stepperCommand, "stepper_2")
            stepperCommand.steps = -7
            self.sendStepperCommand(stepperCommand, "stepper_2")
            
            stepperCommand.steps = 7
            self.sendStepperCommand(stepperCommand, "stepper_3")
            stepperCommand.steps = -7
            self.sendStepperCommand(stepperCommand, "stepper_3")

    def sendStepperCommand(self, stepper_command, name):
        print "send axis command: steps=%i, delay=%f, name=%s" % (stepper_command.steps, stepper_command.delay, name)
        stepper_command.name = name

        self.pub.publish(stepper_command)
        self.rate.sleep()

if __name__ == '__main__':
    rospy.init_node('motion_command_generator', anonymous=True)
    motionCommandGenerator = MotionCommandGenerator()
    motionCommandGenerator.sendStepperCommands()
    rospy.spin()
