#!/usr/bin/env python

import rospy
import random
import math
from drives.msg import MotorCommand
from drives.msg import MotionCommand

class MotionCommandGenerator(object):

    def __init__(self):
        self.pub = rospy.Publisher('motion_commands', MotionCommand, queue_size=10)
        self.rate_hz = 5
        self.rate = rospy.Rate(self.rate_hz)
        self.max_speed = 0.5

    def generateMotionCommand(self, speedLeft, speedRight):
        cmdLeft = MotorCommand()
        cmdLeft.motorName = "left"
        cmdLeft.value = speedLeft
        
        cmdRight = MotorCommand()
        cmdRight.motorName = "right"
        cmdRight.value = speedRight

        motionCommand = MotionCommand()
        motionCommand.motorCommands = [cmdLeft, cmdRight]

        return motionCommand

    def randomCommand(self):
        return self.generateMotionCommand(random.uniform(0.1, 0.4), random.uniform(0.1, 0.4))

    def forward(self, speed, angle):
        # angle between -90 (left) and 90 (right) degrees
        left = (angle + 90.0) / 180.0
        right = (90 - angle) / 180.0

        left = 2* speed * left
        right = 2* speed * right

        print "left=%f, right=%f" % (left, right)

        # is l or r greater max speed?
        m = max(left, right)
        if abs(m) > self.max_speed:
            e = self.max_speed / abs(m)
            left *= e
            right *= e

        self.sendMotionCommand(self.generateMotionCommand(left, right)) 

    def backward(self, speed, angle):
        self.forward(-speed, -angle)

    def pointturn(self, speed):
        self.forward(speed, 90)

    def stop(self):
        self.forward(0, 0)

    def sendMotionCommand(self, motionCommand):
        print "send motor commands"
        print "  motor=%s, value=%f" % (motionCommand.motorCommands[0].motorName, motionCommand.motorCommands[0].value)
        print "  motor=%s, value=%f" % (motionCommand.motorCommands[1].motorName, motionCommand.motorCommands[1].value)
        
        motionCommand.motorCommands[0].value = min(max(-self.max_speed, motionCommand.motorCommands[0].value), self.max_speed)
        motionCommand.motorCommands[1].value = min(max(-self.max_speed, motionCommand.motorCommands[1].value), self.max_speed)
        
        self.pub.publish(motionCommand)
        self.rate.sleep()

    def sendMotionCommands(self):
        while not rospy.is_shutdown():
            for i in range(0, 5):
                selff.forwardCommand(i/20.0)
            for i in range(5, 0, -1):
                self.forwardCommand(i/20.0)
            for i in range(0, 5):
                self.backwardCommand(i/20.0)
            for i in range(5, 0, -1):
                self.backwardCommand(i/20.0)

    def drive(self, speed, angle, durationMs):
        start = rospy.get_rostime()
        numCommands = 0
        while True:
            diff = (rospy.get_rostime() - start).to_sec() * 1000
            print "diff: %f" % diff
            if (diff + (1000 / self.rate_hz) >= durationMs):
                break;

            self.forward(speed, angle)
            numCommands += 1
        self.stop()
        print "number of commands send: %i" % numCommands

if __name__ == '__main__':
    rospy.init_node('motion_command_generator', anonymous=True)
    motionCommandGenerator = MotionCommandGenerator()
    motionCommandGenerator.drive(0.25, 20, 1000)
    motionCommandGenerator.stop()
    motionCommandGenerator.drive(0.25, 0, 1000)
    motionCommandGenerator.stop()
